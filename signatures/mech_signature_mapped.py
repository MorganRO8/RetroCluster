"""Mechanism signature helpers for mapped reactions."""
from __future__ import annotations

from typing import Dict

from utils.hashing import blake3_hexdigest

from .atom_mapping import MappedRxn


def _hash_tokens(prefix: str, tokens: tuple[str, ...]) -> str:
    payload = "|".join((prefix, *tokens)).encode("utf-8")
    return blake3_hexdigest(payload)


def mech_sig_from_mapping(mapped: MappedRxn, radius: int = 1) -> Dict[str, object]:
    """Create a deterministic signature payload for mapped reactions.

    Parameters
    ----------
    mapped:
        Parsed mapping result.  Only the simple token list generated by
        :func:`signatures.atom_mapping.map_reaction` is required for this toy
        implementation.
    radius:
        Included for API compatibility with the long-form design.  The value
        does not influence the simplified signature but it is recorded in the
        payload for traceability.
    """

    events = mapped.event_tokens
    mech_sig_base = _hash_tokens("base", events)
    mech_sig_r1 = _hash_tokens(f"r{radius}", events)
    mech_sig_r2 = _hash_tokens(f"r{radius+1}", events)

    redox_events = sum(1 for token in events if token.startswith("+O"))
    ring_events = sum(1 for token in events if token.startswith("+C"))

    return {
        "mech_sig_base": mech_sig_base,
        "mech_sig_r1": mech_sig_r1,
        "mech_sig_r2": mech_sig_r2,
        "event_tokens": list(events),
        "redox_events": redox_events,
        "stereo_events": 0,
        "ring_events": ring_events,
        "radius": radius,
    }
